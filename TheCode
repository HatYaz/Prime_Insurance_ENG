#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import csv
import statistics as stats

# -----------------------------
# Calculation Functions
# -----------------------------
def compute_pure_premium(freq, severity, deductible, coinsurance):
    effective_severity = max(0, severity - deductible) * min(max(coinsurance, 0), 1)
    return freq * effective_severity

def apply_technical_factors(pure, exposure, vulnerability, climate):
    return pure * exposure * vulnerability * climate

def apply_loadings(technical, expense_pct, margin_pct, uncertainty_pct):
    multiplier = 1 + (expense_pct + margin_pct + uncertainty_pct) / 100.0
    return technical * multiplier

def analyze_csv(path):
    years, losses = [], []
    with open(path, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            try:
                year = int(row.get("year"))
                amount = float(row.get("amount"))
                years.append(year)
                losses.append(amount)
            except Exception:
                continue

    if not years or not losses:
        raise ValueError("Invalid or empty CSV file.")

    n_years = max(years) - min(years) + 1
    n_events = sum(1 for v in losses if v > 0)
    freq = n_events / n_years
    positive_losses = [v for v in losses if v > 0]
    severity = stats.mean(positive_losses) if positive_losses else 0

    return freq, severity, n_years, n_events

# -----------------------------
# GUI
# -----------------------------
class InsuranceApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Climate Insurance Premium Evaluation - Copyright 2024, Hatem Yazidi, hatem.yazidi@gmail.com")
        self.geometry("1000x700")
        self.create_widgets()

    def create_widgets(self):
        # Two main columns
        main_frame = ttk.Frame(self, padding=12)
        main_frame.pack(fill="both", expand=True)

        left_frame = ttk.Frame(main_frame, padding=8)
        left_frame.pack(side="left", fill="both", expand=True)

        right_frame = ttk.Frame(main_frame, padding=8)
        right_frame.pack(side="right", fill="both", expand=True)

        # ====================
        # Left column
        # ====================
        # Manual mode
        section1 = ttk.LabelFrame(left_frame, text="Risk Parameters (Manual)", padding=10)
        section1.pack(fill="x", pady=5)

        self.var_freq = tk.DoubleVar(value=0.1)
        self.var_sev = tk.DoubleVar(value=25000)
        self.var_ded = tk.DoubleVar(value=1000)
        self.var_co = tk.DoubleVar(value=1.0)

        self.add_entry(section1, "Annual Frequency (events/year)", self.var_freq)
        self.add_entry(section1, "Average Severity ($)", self.var_sev)
        self.add_entry(section1, "Deductible ($)", self.var_ded)
        self.add_entry(section1, "Coinsurance (0‚Äì1)", self.var_co)

        # CSV Import
        section_csv = ttk.LabelFrame(left_frame, text="Import CSV Data", padding=10)
        section_csv.pack(fill="x", pady=5)

        tk.Button(section_csv, text="üìÇ Load CSV File", 
                  command=self.load_csv, bg="dimgray", fg="white",
                  relief="raised", bd=4).pack(pady=4)

        # Technical factors
        section2 = ttk.LabelFrame(left_frame, text="Technical Factors", padding=10)
        section2.pack(fill="x", pady=5)

        self.var_expo = tk.DoubleVar(value=1.0)
        self.var_vuln = tk.DoubleVar(value=1.0)
        self.var_clim = tk.DoubleVar(value=1.1)

        self.add_entry(section2, "Exposure Factor", self.var_expo)
        self.add_entry(section2, "Vulnerability Factor", self.var_vuln)
        self.add_entry(section2, "Climate Factor", self.var_clim)

        # Charges & margins
        section3 = ttk.LabelFrame(left_frame, text="Charges & Margin (%)", padding=10)
        section3.pack(fill="x", pady=5)

        self.var_exp = tk.DoubleVar(value=15)
        self.var_margin = tk.DoubleVar(value=5)
        self.var_uncert = tk.DoubleVar(value=10)

        self.add_entry(section3, "Operating Expenses (%)", self.var_exp)
        self.add_entry(section3, "Commercial Margin (%)", self.var_margin)
        self.add_entry(section3, "Uncertainty / Reinsurance (%)", self.var_uncert)

        # Buttons
        btn_frame = ttk.Frame(left_frame)
        btn_frame.pack(pady=10, fill="x")

        tk.Button(btn_frame, text="‚öôÔ∏è Calculate Premium", 
                  command=self.calculate, bg="dimgray", fg="white",
                  relief="raised", bd=4).pack(side="left", expand=True, fill="x", padx=5)

        tk.Button(btn_frame, text="‚ùå Quit", 
                  command=self.quit, bg="red", fg="white",
                  relief="raised", bd=4).pack(side="left", expand=True, fill="x", padx=5)

        # Results
        self.txt_result = tk.Text(left_frame, height=14, wrap="word", fg="purple", font=("Helvetica", 11, "bold"))
        self.txt_result.pack(fill="both", expand=True)

        # ====================
        # Right column
        # ====================
        procedure_text = (
            "Application Procedure:\n\n"
            "1- Enter risk parameters manually:\n"
            "   - Annual frequency (average number of events per year).\n"
            "   - Average claim severity.\n"
            "   - Deductible and coinsurance.\n\n"
            "2- (Optional) Load a CSV file containing historical claims.\n"
            "   The program will automatically calculate frequency and severity.\n\n"
            "3- Set technical factors: exposure, vulnerability, climate.\n\n"
            "4- Set charges and margins (in %).\n\n"
            "5- Click '‚öôÔ∏è Calculate Premium' to get:\n"
            "   - Pure Premium\n"
            "   - Technical Premium\n"
            "   - Commercial Premium\n\n"
            "6- Click '‚ùå Quit' to close the application.\n\n"
            "Note: Results appear in purple bold text in the left panel."
        )

        text_box = tk.Text(right_frame, wrap="word", font=("Helvetica", 12), padx=10, pady=10)
        text_box.pack(fill="both", expand=True)
        text_box.insert(tk.END, procedure_text)
        text_box.config(state="disabled")  # read-only

    def add_entry(self, parent, label, var):
        frame = ttk.Frame(parent)
        frame.pack(fill="x", pady=2)
        ttk.Label(frame, text=label).pack(side="left")
        ttk.Entry(frame, textvariable=var, width=12).pack(side="right")

    def load_csv(self):
        from tkinter.filedialog import askopenfilename
        path = askopenfilename(filetypes=[("CSV files", "*.csv")])
        if not path:
            return
        try:
            freq, severity, n_years, n_events = analyze_csv(path)
            self.var_freq.set(round(freq, 3))
            self.var_sev.set(round(severity, 2))
            messagebox.showinfo("CSV Loaded",
                                f"File: {path}\n"
                                f"Period: {n_years} years\n"
                                f"Events: {n_events}\n"
                                f"Estimated Frequency: {freq:.3f}\n"
                                f"Average Severity: ${severity:.2f}")
        except Exception as e:
            messagebox.showerror("CSV Error", str(e))

    def calculate(self):
        try:
            f, s, d, c = self.var_freq.get(), self.var_sev.get(), self.var_ded.get(), self.var_co.get()
            pure = compute_pure_premium(f, s, d, c)

            expo, vuln, clim = self.var_expo.get(), self.var_vuln.get(), self.var_clim.get()
            technical = apply_technical_factors(pure, expo, vuln, clim)

            exp_pct, mar_pct, unc_pct = self.var_exp.get(), self.var_margin.get(), self.var_uncert.get()
            commercial = apply_loadings(technical, exp_pct, mar_pct, unc_pct)

            result = (
                f"=== Results ===\n"
                f"Pure Premium       : ${pure:,.2f}\n"
                f"Technical Premium  : ${technical:,.2f}\n"
                f"Commercial Premium : ${commercial:,.2f}\n"
            )

            self.txt_result.delete("1.0", tk.END)
            self.txt_result.insert(tk.END, result)

        except Exception as e:
            messagebox.showerror("Error", str(e))

# -----------------------------
# Launch
# -----------------------------
if __name__ == "__main__":
    app = InsuranceApp()
    app.mainloop()
